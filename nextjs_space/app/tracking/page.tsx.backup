
import { prisma } from '@/lib/db';
import Header from '@/components/header';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Plus,
  Activity,
  TrendingUp,
  Calendar,
  Zap,
  AlertCircle
} from 'lucide-react';
import Link from 'next/link';
import WorkoutLogForm from '@/components/workout-log-form';
import WorkoutHistory from '@/components/workout-history';
import AIAnalysisSection from '@/components/ai-analysis-section';
import StravaConnect from '@/components/strava-connect';
import StravaNotifications from '@/components/strava-notifications';

export const dynamic = "force-dynamic";

async function getTrackingData() {
  // TODO: Get session and use userId from authenticated user
  // For now, find first profile as temporary fix
  const profile = await prisma.athleteProfile.findFirst();
  
  // If no profile exists, return null (user needs to complete onboarding)
  if (!profile) {
    return {
      profile: null,
      recentWorkouts: [],
      latestAnalysis: null
    };
  }

  // Buscar últimos treinos
  const recentWorkouts = await prisma.completedWorkout.findMany({
    where: { athleteId: profile.id },
    orderBy: { date: 'desc' },
    take: 10
  });

  // Buscar última análise de IA
  const latestAnalysis = await prisma.aIAnalysis.findFirst({
    where: { athleteId: profile.id },
    orderBy: { createdAt: 'desc' }
  });

  // Estatísticas do mês atual
  const startOfMonth = new Date();
  startOfMonth.setDate(1);
  startOfMonth.setHours(0, 0, 0, 0);

  const monthStats = await prisma.completedWorkout.aggregate({
    where: {
      athleteId: profile.id,
      date: { gte: startOfMonth },
      type: 'running'
    },
    _sum: {
      distance: true,
      duration: true
    },
    _count: {
      id: true
    }
  });

  return { profile, recentWorkouts, latestAnalysis, monthStats };
}

export default async function TrackingPage() {
  const { profile, recentWorkouts, latestAnalysis, monthStats } = await getTrackingData();

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-orange-50">
      <Header />
      <StravaNotifications />
      
      <main className="container mx-auto px-4 py-8">
        {/* Cabeçalho */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            Meus Treinos
          </h1>
          <p className="text-gray-600">
            Registre seus treinos e acompanhe sua evolução com análise por IA
          </p>
        </div>

        {/* Estatísticas do mês */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Corridas no Mês</CardTitle>
              <Activity className="h-4 w-4 text-blue-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{monthStats._count.id || 0}</div>
              <p className="text-xs text-gray-500">treinos completados</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Distância Total</CardTitle>
              <TrendingUp className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {monthStats._sum.distance?.toFixed(1) || 0} km
              </div>
              <p className="text-xs text-gray-500">neste mês</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Tempo Total</CardTitle>
              <Calendar className="h-4 w-4 text-orange-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {Math.floor((monthStats._sum.duration || 0) / 60)}h {(monthStats._sum.duration || 0) % 60}min
              </div>
              <p className="text-xs text-gray-500">de treinamento</p>
            </CardContent>
          </Card>
        </div>

        {/* Conexão com Strava */}
        <StravaConnect profile={profile} />

        {/* Tabs principais */}
        <Tabs defaultValue="log" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="log">
              <Plus className="h-4 w-4 mr-2" />
              Registrar Treino
            </TabsTrigger>
            <TabsTrigger value="history">
              <Calendar className="h-4 w-4 mr-2" />
              Histórico
            </TabsTrigger>
            <TabsTrigger value="analysis">
              <Zap className="h-4 w-4 mr-2" />
              Análise IA
            </TabsTrigger>
          </TabsList>

          <TabsContent value="log">
            <Card>
              <CardHeader>
                <CardTitle>Registrar Novo Treino</CardTitle>
                <CardDescription>
                  Preencha os dados do treino realizado para acompanhar sua evolução
                </CardDescription>
              </CardHeader>
              <CardContent>
                <WorkoutLogForm athleteId={profile.id} />
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="history">
            <WorkoutHistory workouts={recentWorkouts} />
          </TabsContent>

          <TabsContent value="analysis">
            <AIAnalysisSection 
              athleteId={profile.id} 
              latestAnalysis={latestAnalysis} 
            />
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
}
